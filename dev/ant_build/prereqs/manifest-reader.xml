<!--
    Copyright (c) 2018 IBM Corporation and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v2.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v20.html

    Contributors:
        IBM Corporation - initial API and implementation
-->

<project name="manifest-reader" default="build">
	<!-- Build stub -->
	<target name="build"/>

	<!--
	    Loads entries from a manifest file into a property.
	    https://stackoverflow.com/questions/5313438/ant-read-existing-manifest-version-and-append-to-it
	    
	    @jar		JarFile to read manifest data from
	    @entry      The name of the manifest entry to load (optional)
	    @prefix     A prefix to prepend (optional)
	-->
	<scriptdef name="getManifestEntries" language="javascript" description="Gets all entries or a specified one of a manifest file">
	    <attribute name="jar" />
	    <attribute name="entry" />
	    <attribute name="outputproperty" />
	    <![CDATA[
	        var jar = attributes.get("jar");
	        var entry = attributes.get("entry");
	        if (entry == null) {
	            entry = "";
	        }
	        var outputproperty = attributes.get("outputproperty");
	        if (outputproperty == null) {
	            outputproperty = "";
	        }
	
	        var manifest;
 			if (jar != null) {
	            var jarfile = new java.util.jar.JarFile(new java.io.File(jar));
	            manifest = jarfile.getManifest();
        	} else {
            	self.fail("You must provide a jar file");
        	}
	
	        if (manifest == null) {
	            self.log("Problem loading the Manifest from " + jar);
	        } else {
	            var attributes = manifest.getMainAttributes();
	            if (attributes != null) {
	                if (entry != "") {
	                	var value = attributes.getValue(entry);
	                	if(value == null) {
	                		self.log("Could not get entry " + entry + " from " + jar);
	                	}
	                    project.setProperty(outputproperty, value);
	                } else {
	                    var it = attributes.keySet().iterator();
	                    while (it.hasNext()) {
	                        var key = it.next();
	                        project.setProperty(outputproperty, attributes.getValue(key));
	                    }
	                }
	            }
	        }
	    ]]>
	</scriptdef>
</project>
